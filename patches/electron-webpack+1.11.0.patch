patch-package
--- a/node_modules/electron-webpack/out/configurators/js.js
+++ b/node_modules/electron-webpack/out/configurators/js.js
@@ -14,7 +14,7 @@ function _load_semver() {
 function createBabelLoader(configurator) {
     // better to use require instead of just preset name to avoid babel resolving (in our test we set custom resolver - and only in case of explicit required it works)
     const presets = [[require("babel-preset-env"), {
-        modules: false,
+        // modules: false,
         targets: computeBabelEnvTarget(configurator.isRenderer, configurator.electronVersion)
     }]];
     const plugins = [require("babel-plugin-syntax-dynamic-import")];
@@ -29,6 +29,7 @@ function createBabelLoader(configurator) {
     return {
         loader: "babel-loader",
         options: {
+            cacheDirectory: true,
             presets,
             plugins
         }
--- a/node_modules/electron-webpack/out/targets/BaseTarget.js
+++ b/node_modules/electron-webpack/out/targets/BaseTarget.js
@@ -63,11 +63,13 @@ class BaseTarget {
                 use: babelLoader
             });
         }
-        rules.push({
-            test: /\.js$/,
-            exclude: /(node_modules|bower_components)/,
-            use: babelLoader
-        }, {
+        rules.push(
+        //   {
+        //     test: /\.js$/,
+        //     exclude: /(node_modules|bower_components)/,
+        //     use: babelLoader
+        // },
+          {
             test: /\.node$/,
             use: "node-loader"
         });
@@ -84,12 +86,12 @@ class BaseTarget {
             const plugins = configurator.plugins;
             const dllManifest = yield (0, (_dll || _load_dll()).configureDll)(configurator);
             if (configurator.isProduction) {
-                if (configurator.env.minify !== false) {
-                    const BabiliWebpackPlugin = require("babel-minify-webpack-plugin");
-                    plugins.push(new BabiliWebpackPlugin({
-                        removeDebugger: true
-                    }));
-                }
+                // if (configurator.env.minify !== false) {
+                //     const BabiliWebpackPlugin = require("babel-minify-webpack-plugin");
+                //     plugins.push(new BabiliWebpackPlugin({
+                //         removeDebugger: true
+                //     }));
+                // }
                 plugins.push(new (_webpack || _load_webpack()).DefinePlugin({
                     "process.env.NODE_ENV": "\"production\""
                 }));
@@ -143,11 +145,8 @@ function configureDevelopmentPlugins(configurator) {
         plugins.push(new WebpackNotifierPlugin({ title: `Webpack - ${configurator.type}` }));
     }
     // watch common code
-    let commonSourceDir = configurator.electronWebpackConfiguration.commonSourceDirectory;
-    if (commonSourceDir == null) {
-        // not src/common, because it is convenient to just put some code into src to use it
-        commonSourceDir = _path.join(configurator.projectDir, "src");
-    }
+    let commonSourceDir = configurator.electronWebpackConfiguration.commonSourceDirectory || 'src';
+    commonSourceDir = _path.join(configurator.projectDir, commonSourceDir);
     const alienSourceDir = configurator.getSourceDirectory(configurator.type === "main" ? "renderer" : "main");
     configurator.plugins.push(new (_WatchMatchPlugin || _load_WatchMatchPlugin()).WatchFilterPlugin(file => {
         return file === commonSourceDir || isAncestor(file, commonSourceDir) && alienSourceDir != null && !file.startsWith(alienSourceDir);
--- a/node_modules/electron-webpack/out/targets/RendererTarget.js
+++ b/node_modules/electron-webpack/out/targets/RendererTarget.js
@@ -153,43 +153,47 @@ class BaseRendererTarget extends (_BaseTarget || _load_BaseTarget()).BaseTarget
     }
     configureRules(configurator) {
         super.configureRules(configurator);
-        configurator.extensions.push(".css");
-        const cssHotLoader = configurator.isProduction ? [] : ["css-hot-loader"];
-        configurator.rules.push({
-            test: /\.css$/,
-            use: cssHotLoader.concat(ExtractTextPlugin.extract({
-                use: "css-loader",
-                fallback: "style-loader"
-            }))
-        }, {
-            test: /\.less$/,
-            use: cssHotLoader.concat(ExtractTextPlugin.extract({
-                use: [{ loader: "css-loader" }, { loader: "less-loader" }],
-                fallback: "style-loader"
-            }))
-        }, {
-            test: /\.scss/,
-            use: cssHotLoader.concat(ExtractTextPlugin.extract({
-                use: [{ loader: "css-loader" }, { loader: "sass-loader" }],
-                fallback: "style-loader"
-            }))
-        }, {
-            test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,
-            use: {
-                loader: "url-loader",
-                options: (0, (_BaseTarget || _load_BaseTarget()).configureFileLoader)("imgs")
-            }
-        }, {
-            test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,
-            loader: "url-loader",
-            options: (0, (_BaseTarget || _load_BaseTarget()).configureFileLoader)("media")
-        }, {
-            test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
-            use: {
-                loader: "url-loader",
-                options: (0, (_BaseTarget || _load_BaseTarget()).configureFileLoader)("fonts")
-            }
-        });
+        // configurator.extensions.push(".css");
+        // const cssHotLoader = configurator.isProduction ? [] : ["css-hot-loader"];
+        // configurator.rules.push(
+        //   {
+        //     test: /\.css$/,
+        //     use: cssHotLoader.concat(ExtractTextPlugin.extract({
+        //         use: "css-loader",
+        //         fallback: "style-loader"
+        //     }))
+        // },
+        //   {
+        //     test: /\.less$/,
+        //     use: cssHotLoader.concat(ExtractTextPlugin.extract({
+        //         use: [{ loader: "css-loader" }, { loader: "less-loader" }],
+        //         fallback: "style-loader"
+        //     }))
+        // },
+        //   {
+        //     test: /\.scss/,
+        //     use: cssHotLoader.concat(ExtractTextPlugin.extract({
+        //         use: [{ loader: "css-loader" }, { loader: "sass-loader" }],
+        //         fallback: "style-loader"
+        //     }))
+        // }, {
+        //     test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,
+        //     use: {
+        //         loader: "url-loader",
+        //         options: (0, (_BaseTarget || _load_BaseTarget()).configureFileLoader)("imgs")
+        //     }
+        // }, {
+        //     test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,
+        //     loader: "url-loader",
+        //     options: (0, (_BaseTarget || _load_BaseTarget()).configureFileLoader)("media")
+        // }, {
+        //     test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
+        //     use: {
+        //         loader: "url-loader",
+        //         options: (0, (_BaseTarget || _load_BaseTarget()).configureFileLoader)("fonts")
+        //     }
+        // }
+        // );
         if (configurator.hasDevDependency("ejs-html-loader")) {
             configurator.rules.push({
                 test: /\.ejs$/,
